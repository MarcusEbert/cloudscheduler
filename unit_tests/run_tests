#!/usr/bin/env python3
"""
Unit tests.
"""

from unit_test_common import initialize_csv2_request
from importlib import import_module
from os import listdir
from re import sub

import sys
import user_requests_setup
import user_requests_cleanup

def get_test_list():
    test_files = []
    test_names = []
    for f in sorted(listdir('.')):
        if f.startswith('test'):
            test_files.append(f[:-3])
            test_names.append(sub(r'\d', '', f[5:-3]))
    return test_names, test_files

def main():
    test_names, test_files = get_test_list()
    options = []
    setup = True
    cleanup = True
    if len(sys.argv) > 1:
        for arg in sys.argv[1:]:
            if arg == '-h' or arg == '--help':
                print(test_names)
                exit()
            elif arg == '-ss' or arg == '--skip-setup':
                setup = False
            elif arg == '-sc' or arg == '--skip-cleanup':
                cleanup = False
            elif arg.endswith(']'):
                temp = arg.split('[')
                if temp[0] not in test_names:
                    print('Error: {} is not a valid test group. For a list of valid tests run command with the "-h" option.'.format(temp[0]))
                    exit(1)
                option = (temp[0], {})
                initialize_csv2_request(option[1], sys.argv[0], selections=temp[1][:-1])
                options.append(option)
            else:
                if arg not in test_names:
                    print('Error: {} is not a valid test group. For a list of valid tests run command with the "-h" option.'.format(arg))
                    exit(1)
                option = (arg, {})
                initialize_csv2_request(option[1], sys.argv[0])
                options.append(option)
    
    hidden_gvar = {}
    initialize_csv2_request(hidden_gvar, sys.argv[0], hidden=True)
    
    if len(options) == 0:
        gvar = {}
        initialize_csv2_request(gvar, sys.argv[0])
        if setup:
            print('Setting up user tests...')
            user_requests_setup.main(hidden_gvar)
        for i in range(len(test_names)):
            exec('import {}'.format(test_files[i]), globals(), locals())
            print('\n*** Testing {} ***\n'.format(test_names[i]))
            exec('{}.main(gvar)'.format(test_files[i]), globals(), locals())
        if cleanup:
            print('Cleaning up user tests...')
            user_requests_cleanup.main(hidden_gvar)
        print('Test run=%s, skipped=%s, failed=%s.' % (gvar['ut_count']-gvar['ut_skipped'], gvar['ut_skipped'], gvar['ut_failed']))
        exit(gvar['ut_failed'])
    else:
        if setup:
            print('Setting up user tests...')
            user_requests_setup.main(hidden_gvar)
        for o, g in options:
            exec('import {}'.format(test_files[test_names.index(o)]), globals(), locals())
            print('\n*** Testing {} ***\n'.format(o))
            exec('{}.main(g)'.format(test_files[test_names.index(o)]), globals(), locals())
        if cleanup:
            print('Cleaning up user tests...')
            user_requests_cleanup.main(hidden_gvar)
        for o, g in options:
            print('Test {} run={}, skipped={}, failed={}.'.format(o, g['ut_count']-g['ut_skipped'], g['ut_skipped'], g['ut_failed']))


if __name__ == "__main__":
    main()
