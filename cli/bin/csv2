#!/usr/bin/env python3
"""
This is the command line interface to cloudscheduler version 2.
"""

from getpass import getpass
from pathlib import Path
from subprocess import Popen

import os
import sys

import yaml
import json

from csv2_common import _show_table

import csv2_cloud
import csv2_group
import csv2_help
import csv2_settings
import csv2_user

DEFAULT_SETTINGS = {
    'csv2-server-url': 'https://localhost',
    }

def main(args):
    """
    Determine object type and call handler.
    """

#       'ca_cert': '%s/lets-encrypt-x3-cross-signed.pem.txt' % os.path.dirname(os.path.abspath(args[0])),
    # Initialize global variables.
    gvar = {
        'action': None,
        'actions': {
            'cloud': {
                'add':    csv2_cloud._add,
                'delete': csv2_cloud._delete,
                'list':   csv2_cloud._list,
                'modify': csv2_cloud._modify,
                'status': csv2_cloud._status,
                },
            'group': {
                'list':   csv2_group._list,
                },
            'settings': {
                'delete': csv2_settings._delete,
                'list':   csv2_settings._list,
                'set':    csv2_settings._set,
                },
            'user': {
                'add':    csv2_user._add,
                'delete': csv2_user._delete,
                'list':   csv2_user._list,
#               'modify': csv2_user._modify,
                },
            },
        'command_keys': (
            # short_name, long_name, key_value(T)/boolean(F)
            ('-cn',  '--cloud-name', True),
            ('-ca',  '--cloud-url', True),
            ('-ck',  '--cloud-password', True),
            ('-cP',  '--cloud-project-domain', True),
            ('-cp',  '--cloud-project', True),
            ('-cr',  '--cloud-region', True),
            ('-ct',  '--cloud-type', True),
            ('-cU',  '--cloud-user-domain', True),
            ('-cu',  '--cloud-user', True),
            ('-g',   '--group', True),
            ('-ga',  '--grid-cert-authority', True),
            ('-gc',  '--grid-cert', True),
            ('-gk',  '--grid-key', True),
            ('-gn',  '--grid-common-name', True),
            ('-H',   '--long-help', False),
            ('-h',   '--help', False),
            ('-ok',  '--only-keys', False),
            ('-p',   '--password', True),
            ('-r',   '--rotate', False),
            ('-s',   '--csv2-server', True),
            ('-U',   '--csv2-server-url', True),
            ('-u',   '--user', True),
            ('-y',   '--yes', False),
            ('-su',  '--super-user', False),
            ('-vc',  '--virtual-cores', True),
            ('-vk',  '--keypair', True),
            ('-vr',  '--virtual-ram', True),
            ('-xA',  '--expose-API', False),
            ),
        'cookies': dict(),
        'function_args': None,
        'home_dir': str(Path.home()),
        'object': None,
        }
    
    # Retrieve arguments.
    gvar['command_args'] = _args(gvar, args[1:])

    # Ensure a minimal user settings exists.
    if not os.path.exists('%s/.csv2/default' % gvar['home_dir']):
        os.makedirs('%s/.csv2/default' % gvar['home_dir'], mode=0o700)  

    if not os.path.exists('%s/.csv2/default/settings.yaml' % gvar['home_dir']):
        _fd = open('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 'w')
        _fd.write(yaml.dump(DEFAULT_SETTINGS))
        _fd.close()
        os.chmod('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 0o600)

    # Load the user settings.
    if 'csv2-server' in gvar['command_args']:
        gvar['server'] = gvar['command_args']['csv2-server']
    else:
        gvar['server'] = 'default'

    try:
        _fd = open('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['server']))
        gvar['user_settings'] = yaml.load(_fd)
        _fd.close()
    except:
        gvar['user_settings'] = {}

    # Apply options temporarily.
    for key in gvar['command_args']:
        if isinstance(gvar['command_args'][key], bool):
            if key not in gvar['user_settings']:
                gvar['user_settings'][key] = False
            
            if gvar['command_args'][key]:
                gvar['user_settings'][key] = not gvar['user_settings'][key]
        else:
            if gvar['command_args'][key] == '-':
                if key in gvar['user_settings']:
                    del(gvar['user_settings'][key])
            else:
                gvar['user_settings'][key] = gvar['command_args'][key]

    # Call object handler.
    if gvar['object'] in gvar['actions']:
        if gvar['action'] in gvar['actions'][gvar['object']]:
            gvar['actions'][gvar['object']][gvar['action']](gvar)
        else:
            csv2_help._help(gvar)
            if not gvar['action']:
                print('Error: No action specified for object "%s"; use -h or -H for help.' % gvar['object'])
            else:
                print('Error: Invalid action "%s" for object "%s"; use -h or -H for help.' % (gvar['action'], gvar['object']))
            exit(1)
    else:
        csv2_help._help(gvar)
        if not gvar['object']:
            print('Error: No object specified; use -h or -H for help.')
        else:
            print('Error: Invalid object "%s" specified; use -h or -H for help.' % gvar['object'])
        exit(1)
             
def _args(gvar, arg_list):
    """
    Return dictionary of arguments.
    """

    # Initialize response.
    response = {}
    unrecognized = []

    for _ix in range(len(gvar['command_keys'])):
        if not gvar['command_keys'][_ix][2]:
            response[gvar['command_keys'][_ix][1][2:]] = False

    # Scan args.
    _max_ix = len(arg_list) - 1
    _skip_next = False
    for _ix in range(len(arg_list)):
        if _skip_next:
            _skip_next = False

        else:
            _recognized = False
            for _iy in range(len(gvar['command_keys'])):
                _key_mnemonic = '%s|%s' % (gvar['command_keys'][_iy][0], gvar['command_keys'][_iy][1])
                if gvar['command_keys'][_iy][2] and \
                _ix < _max_ix and \
                (arg_list[_ix] == gvar['command_keys'][_iy][0] or \
                arg_list[_ix] == gvar['command_keys'][_iy][1]):
                    _recognized = True
                    _skip_next = True
                    response[gvar['command_keys'][_iy][1][2:]] = arg_list[_ix+1]

                elif not gvar['command_keys'][_iy][2] and \
                (arg_list[_ix] == gvar['command_keys'][_iy][0] or \
                arg_list[_ix] == gvar['command_keys'][_iy][1]):
                    _recognized = True
                    response[gvar['command_keys'][_iy][1][2:]] = True

        if not _recognized:
            if not gvar['object']:
                gvar['object'] = arg_list[_ix]
            elif not gvar['action']:
                gvar['action'] = arg_list[_ix]
            else:
                unrecognized.append(arg_list[_ix])

    if unrecognized:
        print('Error: The following command line arguments were unrecognized: %s' % unrecognized)
        exit(1)

    return response 

if __name__ == "__main__":
    main(sys.argv)

