#!/usr/bin/env python3
"""
This is the command line interface to cloudscheduler version 2.
"""

from getpass import getpass
from pathlib import Path
from subprocess import Popen

import os
import sys

import yaml
import json

from csv2_common import _required_settings, _show_table

import csv2_cloud
import csv2_user

DEFAULT_SETTINGS = {
    'url': 'https://localhost',
    }

COMMAND_ARGS = (
        # (mandatory, key_value, short_name, long_name)
        ('-C', '--target-common-name', True),
        ('-c', '--cert', True),
        ('-g', '--group', True),
        ('-h', '--help', False),
        ('-k', '--key', True),
        ('-R', '--rotate', False),
        ('-P', '--target-password', True),
        ('-p', '--password', True),
        ('-S', '--url', True),
        ('-s', '--server', True),
        ('-U', '--target-user', True),
        ('-u', '--user', True),
        ('-y', '--yes', False),
    )

def main(args):
    """
    Determine object type and call handler.
    """

#       'ca_cert': '%s/lets-encrypt-x3-cross-signed.pem.txt' % os.path.dirname(os.path.abspath(args[0])),
    # Initialize global variables.
    gvar = {
        'action': None,
        'cookies': dict(),
        'function_args': None,
        'home_dir': str(Path.home()),
        'object': None,
        }
    
    # Retrieve arguments.
    gvar['command_args'] = _args(gvar, COMMAND_ARGS, args[1:])

    # Ensure a minimal user settings exists.
    if not os.path.exists('%s/.csv2/default' % gvar['home_dir']):
        os.makedirs('%s/.csv2/default' % gvar['home_dir'], mode=0o700)  

    if not os.path.exists('%s/.csv2/default/settings.yaml' % gvar['home_dir']):
        _fd = open('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 'w')
        _fd.write(yaml.dump(DEFAULT_SETTINGS))
        _fd.close()
        os.chmod('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 0o600)

    # Load the user settings.
    if 'server' in gvar['command_args']:
        gvar['server'] = gvar['command_args']['server']
    else:
        gvar['server'] = 'default'

    try:
        _fd = open('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['server']))
        gvar['user_settings'] = yaml.load(_fd)
        _fd.close()
    except:
        gvar['user_settings'] = {}

    # Apply options temporarily.
    for key in gvar['command_args']:
        if isinstance(gvar['command_args'][key], bool):
            if key not in gvar['user_settings']:
                gvar['user_settings'][key] = False
            
            if gvar['command_args'][key]:
                gvar['user_settings'][key] = not gvar['user_settings'][key]
        else:
            if gvar['command_args'][key] == '-':
                if key in gvar['user_settings']:
                    del(gvar['user_settings'][key])
            else:
                gvar['user_settings'][key] = gvar['command_args'][key]

    # Check for minimum arguments; print help messages and exit, if not.
    if gvar['user_settings']['help']:
        print('Help requested; see the csv2 man page.')
        exit(0)

    
    # Call object handler.
    if gvar['object'] == 'cloud':
        if gvar['action'] == 'list':
            csv2_cloud._cloud_list(gvar)
        elif gvar['action'] == 'status':
            csv2_cloud._cloud_status(gvar)
        else:
            _invalid_object_action(gvar, 'action')

    elif gvar['object'] == 'user':
        if gvar['action'] == 'create':
            csv2_user._user_create(gvar)
        elif gvar['action'] == 'delete':
            csv2_user._user_delete(gvar)
        elif gvar['action'] == 'list':
            csv2_user._user_list(gvar)
        else:
            _invalid_object_action(gvar, 'action')

    elif gvar['object'] == 'config':
        if gvar['action'] == 'delete':
            _config_list(gvar)
        elif gvar['action'] == 'list':
            _config_list(gvar)
        elif gvar['action'] == 'set':
            _config_set(gvar)
        else:
            _invalid_object_action(gvar, 'action')

    else:
        _invalid_object_action(gvar, 'object')

def _args(gvar, key_list, arg_list):
    """
    Return dictionary of arguments.
    """

    # Initialize response.
    response = {}
    unrecognized = []

    for _ix in range(len(key_list)):
        if not key_list[_ix][2]:
            response[key_list[_ix][1][2:]] = False

    # Scan args.
    _max_ix = len(arg_list) - 1
    _skip_next = False
    for _ix in range(len(arg_list)):
        if _skip_next:
            _skip_next = False

        else:
            _recognized = False
            for _iy in range(len(key_list)):
                _key_mnemonic = '%s|%s' % (key_list[_iy][0], key_list[_iy][1])
                if key_list[_iy][2] and \
                _ix < _max_ix and \
                (arg_list[_ix] == key_list[_iy][0] or \
                arg_list[_ix] == key_list[_iy][1]):
                    _recognized = True
                    _skip_next = True
                    response[key_list[_iy][1][2:]] = arg_list[_ix+1]

                elif not key_list[_iy][2] and \
                (arg_list[_ix] == key_list[_iy][0] or \
                arg_list[_ix] == key_list[_iy][1]):
                    _recognized = True
                    response[key_list[_iy][1][2:]] = True

        if not _recognized:
            if not gvar['object']:
                gvar['object'] = arg_list[_ix]
            elif not gvar['action']:
                gvar['action'] = arg_list[_ix]
            else:
                unrecognized.append(arg_list[_ix])

    if unrecognized:
        print('Error: The following command line arguments were unrecognized: %s' % unrecognized)
        exit(1)

    return response 

def _config_list(gvar):
    """
    Process user list.
    """

    # Retrive all possible option names ordered by 'server' and then alphabetically.
    _keys = ['server']
    for _ix in range(len(COMMAND_ARGS)):
        key = COMMAND_ARGS[_ix][1][2:]
        if key not in _keys:
            _keys.append(key)
    _keys = [_keys[0]] + sorted(_keys[1:])

    # Build a queryset of settings for all servers.
    _queryset = []
    for server in os.listdir('%s/.csv2' % gvar['home_dir']):
        server_path = '%s/.csv2//%s' % (gvar['home_dir'], server)
        if os.path.isdir(server_path):
            _fd = open('%s/settings.yaml' % server_path)
            _settings = yaml.load(_fd.read())
            _fd.close()

            for key in sorted(_keys):
                if key not in _settings:
                    if key == 'server':
                        _settings[key] = server
                    else:
                        _settings[key] = '-'
            
            _queryset.append({'fields': _settings})

    # Display results.
    _show_table(gvar, _queryset, _keys)

def _config_set(gvar):
    """
    Modify user settings.
    """

    # Check for mandatory arguments.
    _required_settings(gvar, ['--server'], mandatory_arguments=True)

    # Make the server directory, if necessary.
    if not os.path.exists('%s/.csv2/%s' % (gvar['home_dir'], gvar['server'])):
        os.makedirs('%s/.csv2/%s' % (gvar['home_dir'], gvar['server']), mode=0o700)  

    # Write the settings file.
    _fd = open('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['server']), 'w')
    _fd.write(yaml.dump(gvar['user_settings']))
    _fd.close()
    os.chmod('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 0o600)

def _invalid_object_action(gvar, option):
    """
    The main function has not been able to recognize the object or action. Issue and error message and exit.
    """

    if option == 'object':
        if not gvar['object']:
            print('Error: No object specified; see the csv2 man page.')
        else:
            print('Error: Invalid object "%s" specified; see the csv2 man page.' % gvar['object'])
    else:
        if not gvar['action']:
            print('Error: No action specified for object "%s"; see the csv2 man page.' % gvar['object'])
        else:
            print('Error: Invalid action "%s" for object "%s"; see the csv2 man page.' % (gvar['action'], gvar['object']))

    exit(1)

if __name__ == "__main__":
    main(sys.argv)

