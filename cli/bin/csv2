#!/usr/bin/env python3
"""
This is the command line interface to cloudscheduler version 2.
"""

from getpass import getpass
from pathlib import Path
from subprocess import Popen

import os
import sys

import json
import requests
import yaml

EXTRACT_CSRF = str.maketrans('=;', '  ')

DEFAULT_SETTINGS = {
    'url': 'https://localhost',
    }

COMMAND_ARGS = (
        # (mandatory, key_value, short_name, long_name)
        ('-C', '--target-common-name', True),
        ('-c', '--cert', True),
        ('-g', '--group', True),
        ('-h', '--help', False),
        ('-k', '--key', True),
        ('-R', '--rotate', False),
        ('-P', '--target-password', True),
        ('-p', '--password', True),
        ('-S', '--url', True),
        ('-s', '--server', True),
        ('-U', '--target-user', True),
        ('-u', '--user', True),
        ('-y', '--yes', False),
    )

def main(args):
    """
    Determine object type and call handler.
    """

    # Initialize global variables.
    gvar = {
        'action': None,
        'cookies': dict(),
        'function_args': None,
        'home_dir': str(Path.home()),
        'object': None,
        }
    
    # Retrieve arguments.
    _command_args = _args(gvar, COMMAND_ARGS, args[1:])

    # Ensure a minimal user settings exists.
    if not os.path.exists('%s/.csv2/default' % gvar['home_dir']):
        os.makedirs('%s/.csv2/default' % gvar['home_dir'], mode=0o700)  

    if not os.path.exists('%s/.csv2/default/settings.yaml' % gvar['home_dir']):
        _fd = open('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 'w')
        _fd.write(yaml.dump(DEFAULT_SETTINGS))
        _fd.close()
        os.chmod('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 0o600)

    # Load the user settings.
    if 'server' in _command_args:
        gvar['server'] = _command_args['server']
    else:
        gvar['server'] = 'default'

    try:
        _fd = open('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['server']))
        gvar['user_settings'] = yaml.load(_fd)
        _fd.close()
    except:
        gvar['user_settings'] = {}

    # Apply options temporarily.
    for key in _command_args:
        if isinstance(_command_args[key], bool):
            if key not in gvar['user_settings']:
                gvar['user_settings'][key] = False
            
            if _command_args[key]:
                gvar['user_settings'][key] = not gvar['user_settings'][key]
        else:
            if _command_args[key] == '-':
                if key in gvar['user_settings']:
                    del(gvar['user_settings'][key])
            else:
                gvar['user_settings'][key] = _command_args[key]

    # Check for minimum arguments; print help messages and exit, if not.
    if gvar['user_settings']['help']:
        print('Help requested; see the csv2 man page.')
        exit(0)

    
    # Call object handler.
    if gvar['object'] == 'user':
        if gvar['action'] == 'create':
            _user_create(gvar)
        elif gvar['action'] == 'delete':
            _user_delete(gvar)
        elif gvar['action'] == 'list':
            _user_list(gvar)
        else:
            _invalid_object_action(gvar, 'action')

    elif gvar['object'] == 'config':
        if gvar['action'] == 'delete':
            _config_list(gvar)
        elif gvar['action'] == 'list':
            _config_list(gvar)
        elif gvar['action'] == 'set':
            _config_set(gvar)
        else:
            _invalid_object_action(gvar, 'action')

    else:
        _invalid_object_action(gvar, 'object')

def _args(gvar, key_list, arg_list):
    """
    Return dictionary of arguments.
    """

    # Initialize response.
    response = {}
    unrecognized = []

    for _ix in range(len(key_list)):
        if not key_list[_ix][2]:
            response[key_list[_ix][1][2:]] = False

    # Scan args.
    _max_ix = len(arg_list) - 1
    _skip_next = False
    for _ix in range(len(arg_list)):
        if _skip_next:
            _skip_next = False

        else:
            _recognized = False
            for _iy in range(len(key_list)):
                _key_mnemonic = '%s|%s' % (key_list[_iy][0], key_list[_iy][1])
                if key_list[_iy][2] and \
                _ix < _max_ix and \
                (arg_list[_ix] == key_list[_iy][0] or \
                arg_list[_ix] == key_list[_iy][1]):
                    _recognized = True
                    _skip_next = True
                    response[key_list[_iy][1][2:]] = arg_list[_ix+1]

                elif not key_list[_iy][2] and \
                (arg_list[_ix] == key_list[_iy][0] or \
                arg_list[_ix] == key_list[_iy][1]):
                    _recognized = True
                    response[key_list[_iy][1][2:]] = True

        if not _recognized:
            if not gvar['object']:
                gvar['object'] = arg_list[_ix]
            elif not gvar['action']:
                gvar['action'] = arg_list[_ix]
            else:
                unrecognized.append(arg_list[_ix])

    if unrecognized:
        print('Error: The following command line arguments were unrecognized: %s' % unrecognized)
        exit(1)

    return response 

def _config_list(gvar):
    """
    Process user list.
    """

    _keys = ['server']
    for _ix in range(len(COMMAND_ARGS)):
        key = COMMAND_ARGS[_ix][1][2:]
        if key not in _keys:
            _keys.append(key)
    _keys = [_keys[0]] + sorted(_keys[1:])

    print(_keys)

    _queryset = []
    for server in os.listdir('%s/.csv2' % gvar['home_dir']):
        server_path = '%s/.csv2//%s' % (gvar['home_dir'], server)
        if os.path.isdir(server_path):
            _fd = open('%s/settings.yaml' % server_path)
            _settings = yaml.load(_fd.read())
            _fd.close()

            for key in sorted(_keys):
                if key not in _settings:
                    if key == 'server':
                        _settings[key] = server
                    else:
                        _settings[key] = '-'
            
            _queryset.append({'fields': _settings})

    _show_table(gvar, _queryset, _keys)

def _config_set(gvar):
    """
    Modify user settings.
    """

    # Check for mandatory arguments.
    _missing = []
    if 'server' not in gvar['user_settings']:
        _missing.append('-s|--server')

    if _missing:
        print('Error: "csv2 config set" requires the following parameters: %s' % _missing)
        exit(1)

    # Make the server directory, if necessary.
    if not os.path.exists('%s/.csv2/%s' % (gvar['home_dir'], gvar['server'])):
        os.makedirs('%s/.csv2/%s' % (gvar['home_dir'], gvar['server']), mode=0o700)  

    # Write the settings file.
    _fd = open('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['server']), 'w')
    _fd.write(yaml.dump(gvar['user_settings']))
    _fd.close()
    os.chmod('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 0o600)

def _curl(gvar, request, form_data={}):
    """
    Make RESTful request and return response.
    """

    if 'url' not in gvar['user_settings']:
        print('Error: user settings for server "%s" does not contain a URL value.' % gvar['server'])
        exit(1)

    if form_data:
        _function = requests.post
        _form_data = {**form_data, **{'csrfmiddlewaretoken': gvar['csrf']}}
    else:
        _function = requests.get
        _form_data = {}

    if 'cert' in gvar['user_settings'] and \
        os.path.exists(gvar['user_settings']['cert']) and \
        'key' in gvar['user_settings'] and \
        os.path.exists(gvar['user_settings']['key']):
        _r = _function(
            '%s%s' % (gvar['user_settings']['url'], request),
            headers={'Accept': 'application/json', 'Referer': gvar['user_settings']['url']},
            cert=(gvar['user_settings']['cert'], gvar['user_settings']['key']),
            data=_form_data,
            cookies=gvar['cookies'],
            verify=False
            )

    elif 'user' in gvar['user_settings']:
        if 'password' not in gvar['user_settings'] or gvar['user_settings']['password'] == '-':
            gvar['user_settings']['password'] = getpass('Enter your csv2 password for server "%s": ' % gvar['server'])
        _r = _function(
            '%s%s' % (gvar['user_settings']['url'], request),
            headers={'Accept': 'application/json', 'Referer': gvar['user_settings']['url']},
            auth=(gvar['user_settings']['user'], gvar['user_settings']['password']),
            data=_form_data,
            cookies=gvar['cookies'],
            verify=False
            )

    else:
        print('Error: csv2 servers require certificates or username/password for authentication.')
        exit(1)

    try:
        response = _r.json()
    except:
        response = {'response_code': 1, 'message': 'unable to communicate with server "%s".' % gvar['server']}

    if response['response_code'] != 0:
        print('Error: %s' % response['message'])
        exit(1)

    gvar['cookies'] = _r.cookies
    if 'Set-Cookie' in _r.headers:
        gvar['csrf'] = _r.headers['Set-Cookie'].translate(EXTRACT_CSRF).split()[1]

    return response

def _invalid_object_action(gvar, option):
    """
    The main function has not been able to recognize the object or action. Issue and error message and exit.
    """

    if option == 'object':
        if not gvar['object']:
            print('Error: No object specified; see the csv2 man page.')
        else:
            print('Error: Invalid object "%s" specified; see the csv2 man page.' % gvar['object'])
    else:
        if not gvar['action']:
            print('Error: No action specified for object "%s"; see the csv2 man page.' % gvar['object'])
        else:
            print('Error: Invalid action "%s" for object "%s"; see the csv2 man page.' % (gvar['action'], gvar['object']))

    exit(1)

def _show_table(gvar, queryset, columns):
    """
    Print a table from a django query set.
    """

    # Normalize column definitions.
    _field_names = []
    _column_names = []
    
    if gvar['user_settings']['rotate']:
        _column_lengths = [3, 5]
    else:
        _column_lengths = []

    for column in columns:
        _w = column.split('/')
        if len(_w) < 2:
          _w.append(_w[0])

        _field_names.append(_w[0])
        _column_names.append(_w[1])

        if gvar['user_settings']['rotate']:
            if _column_lengths[0] < len(_w[1]):
                _column_lengths[0] = len(_w[1])
        else:
            _column_lengths.append(len(_w[1]))

    # Normalize the queryset.
    if isinstance(queryset, str):
        _qs = json.loads(queryset)
    else:
        _qs = queryset

    # extract columns.
    _list = []
    for row in _qs:
        _row = []
        for _ix in range(len(_field_names)):
            if _field_names[_ix] in row:
              _value = row[_field_names[_ix]]
            elif _field_names[_ix] in row['fields']:
              _value = row['fields'][_field_names[_ix]]
            else:
              _value = '-'

            if isinstance(_value, bool):
               _len = 5
            elif isinstance(_value, int):
               _len = 11
            elif isinstance(_value, float):
               _len = 21
            elif _value is None:
               _len = 4
            else:
               _len = len(_value)

            if gvar['user_settings']['rotate']:
                _list.append([_column_names[_ix], _value])
                if _column_lengths[1] < _len:
                    _column_lengths[1] = _len
            else:
                _row.append(_value)
                if _column_lengths[_ix] < _len:
                    _column_lengths[_ix] = _len

        if gvar['user_settings']['rotate']:
            _list.append(['', ''])
        else:
            _list.append(_row)

    _column_underscore = []
    for _ix in range(len(_column_lengths)):
        _column_underscore.append('-' * (_column_lengths[_ix] + 2))
    _ruler = '+%s+' % '+'.join(_column_underscore)

    print(_ruler)
    if gvar['user_settings']['rotate']:
        print('+ %s +' % ' | '.join(_show_table_pad(_column_lengths, ['Key', 'Value'])))
    else:
        print('+ %s +' % ' | '.join(_show_table_pad(_column_lengths, _column_names)))
    print(_ruler)

    for _row in _list:
        print('| %s |' % ' | '.join(_show_table_pad(_column_lengths, _row)))

    print(_ruler)

def _show_table_pad(lens, cols):
    """
    Pad column values with blanks; lens contains the maximum length for each column. 
    """

    padded_columns = []

    for _ix in range(len(lens)):
        padded_columns.append('%s%s' % (cols[_ix], ' ' * (lens[_ix] - len(str(cols[_ix])))))

    return padded_columns

def _user_create(gvar):
    """
    Create a user.
    """

    if gvar['user_settings']['help']:
        _help('csv2_user_create')

    # Check for mandatory arguments.
    _missing = []
    if 'target-user' not in gvar['user_settings']:
        _missing.append('-U|--target-user')

    if 'target-password' not in gvar['user_settings']:
        _missing.append('-P|--target-password')

    if 'target-common-name' not in gvar['user_settings']:
        _missing.append('-C|--target-common-name')

    if _missing:
        print('Error: "csv2 user create" requires the following parameters: %s' % _missing)
        exit(1)

    # If a target password prompt was requested (-P .), prompt for password.
    if gvar['user_settings']['target-password'] == '.':
        gvar['user_settings']['target-password'] = getpass('Enter target password: ')

    # Retrieve Cookie/CSRF.
    response = _curl(gvar, '/manage_users/')

    # Create the user.
    response = _curl(
        gvar,
        '/create_user/',
        form_data = {
            'username': gvar['user_settings']['target-user'],
            'password1': gvar['user_settings']['target-password'],
            'password2': gvar['user_settings']['target-password'],
            'common_name': gvar['user_settings']['target-common-name'],
            }
        )
    
    if response['message']:
        print(response['message'])

def _user_delete(gvar):
    """
    Delete a user.
    """

    if gvar['user_settings']['help']:
        _help('csv2_user_delete')

    # Check for mandatory arguments.
    _missing = []
    if 'target-user' not in gvar['user_settings']:
        _missing.append('-U|--target-user')

    if _missing:
        print('Error: "csv2 user delete" requires the following parameters: %s' % _missing)
        exit(1)

    # Retrieve Cookie/CSRF and check that the target user exists.
    response = _curl(gvar, '/manage_users/')
    _user_found = False
    for row in json.loads(response['user_list']):
      if row['pk'] == gvar['user_settings']['target-user']:
        _user_found = True
        break
    
    if not _user_found:
        print('Error: "csv2 user delete" cannot delete "%s", user doesn\'t exist.' % gvar['user_settings']['target-user'])
        exit(1)

    # Confirm user delete.
    if not gvar['user_settings']['yes']:
        print('Are you sure you want to delete user "%s"? (yes|..' % gvar['user_settings']['target-user'])
        _reply = input()
        if _reply != 'yes':
          print('csv2 user delete "%s" cancelled.' % gvar['user_settings']['target-user'])
          exit(0)

    # Delete the user.
    response = _curl(
        gvar,
        '/delete_user/',
        form_data = {
            'username': gvar['user_settings']['target-user'],
            }
        )
    
    if response['message']:
        print(response['message'])

def _user_list(gvar):
    """
    List users.
    """

    if gvar['user_settings']['help']:
        _help('csv2_user_list')

    response = _curl(gvar, '/manage_users/')
    _show_table(
        gvar,
        json.loads(response['user_list']),
        [
            'pk/User',
            'cert_cn/Common Name',
            'password/Passsword',
            'is_superuser/Superuser',
            'join_date/Created',
            'active_group/Group',
        ],
        )

if __name__ == "__main__":
    main(sys.argv)
