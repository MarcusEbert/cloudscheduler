#!/usr/bin/env python3
from subprocess import Popen, PIPE
import datetime
import os
import sys

def archive_a_file(gvar, file_path):
    abs_file_path = os.path.abspath(file_path)
    archive_file_path = '%s/.%s-%s' % ( os.path.dirname(abs_file_path), gvar['current_time'], os.path.basename(abs_file_path))
    print('Archiving: %s' % archive_file_path)

    p = Popen(['mv', abs_file_path, archive_file_path], stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
    if p.returncode !=0:
        print('Error: unable to archive file %s, stdout=%s, stderr=%s.' % (abs_file_path, stdout, stderr))
        exit(1)

def update_a_file(gvar, file_path, file_lines):
    abs_file_path = os.path.abspath(file_path)
    print('Updating: %s' % abs_file_path)

    fd = open(abs_file_path, 'w')
    fd.write('\n'.join(file_lines))
    fd.close()

def main(argv):
    if len(argv) > 1 and os.path.isfile(argv[1]):

        gvar = {}
        gvar['current_time'] = '%s-%s' % (datetime.datetime.now().date(), str(datetime.datetime.now().time())[:8])
        gvar['cmd_path'] = os.path.abspath(argv[0])
        gvar['delimiter'] = '/\\//'
        gvar['file_changes'] = []
        gvar['file_path'] = os.path.abspath(argv[1])
        gvar['path_info'] = gvar['cmd_path'].split('/')
        gvar['path_info_ix'] = gvar['path_info'].index('cloudscheduler')
        gvar['ut_files'] = {}
        gvar['ut_path'] = '%s/unit_tests' % '/'.join(gvar['path_info'][:gvar['path_info_ix'] + 1])

        fd = open(gvar['file_path'])
        gvar['file_lines'] = fd.read().split('\n')
        fd.close()

        error_counter = 0
        error_prefix = None

        # Scan each line of the source file for error messages (containing "lno()"), resequencing
        # the error number in memory.
        for ix in range(len(gvar['file_lines'])):
            if error_prefix:
                pre_lno = gvar['file_lines'][ix].split('lno(', 1)
                if len(pre_lno) > 1:
                    post_lno =  pre_lno[1].split(')', 1)
                    lno_parms = post_lno[0].split(',')
                    for iy in range(1, len(lno_parms)):
                       lno_parms[iy] = lno_parms[iy].strip()

                    # Update the error code.
                    old_ec = lno_parms[0].strip()[1:-1]
                    new_ec = '%s%02d' % (error_prefix, error_counter)
                    if old_ec != new_ec:
                        gvar['file_changes'].append([old_ec, new_ec])
                        lno_parms[0] = "'%s'" % new_ec


                    gvar['file_lines'][ix] = '%slno(%s)%s' % (pre_lno[0], ', '.join(lno_parms), post_lno[1])

                    error_counter += 1

            else:
                # Retrieve the error code prefix ("# lno: UV - error code identifier.").
                if gvar['file_lines'][ix][:7] == '# lno: ':
                    error_prefix = gvar['file_lines'][ix].split()[2]

        if len(gvar['file_changes']) > 0:
            print('Changes: %s' % gvar['file_changes'])
            for item in os.listdir(gvar['ut_path']):
                if os.path.isfile('%s/%s' %(gvar['ut_path'], item)) and item[0] != '.':
                    ut_file_path = '%s/%s' %(gvar['ut_path'], item)
                    fd = open(ut_file_path)
                    ut_file = fd.read()
                    fd.close()

                    related_file = False
                    for line in ut_file.split('\n'):
                        if line[:7] == '# lno: ':
                            if line.split()[2] == error_prefix:
                                related_file = True
                                break
                        
                    if related_file:
                        changed = False
                        for old_ec, new_ec in gvar['file_changes']:
                            split_ut_file = ut_file.split(old_ec)
                            if len(split_ut_file) > 1:
                                changed = True
                                ut_file = ('%s%s%s' % (new_ec[:1], gvar['delimiter'], new_ec[1:])).join(split_ut_file)

                        if changed:
                            gvar['ut_files'][ut_file_path] = ''.join(ut_file.split(gvar['delimiter'])).split('\n')


            archive_a_file(gvar, gvar['file_path'])
            update_a_file(gvar, gvar['file_path'], gvar['file_lines'])

            for file_path in sorted(gvar['ut_files']):
                archive_a_file(gvar, file_path)
                update_a_file(gvar, file_path, gvar['ut_files'][file_path])

        else:
            print('No changes.')

    else:
        print('Synopsis: resequence_error_codes <file_path.py>')
     
if __name__ == "__main__":
    main(sys.argv)

