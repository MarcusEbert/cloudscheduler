#!/usr/bin/env python3
"""
Synopsis: utilities/list_views [ map ]

This command produces one of two reports: 1. without the "map" option, list the view names 
in the order they need to be created, or 2. with the "map" option, prints a report showing
view dependencies.
"""

from subprocess import Popen, PIPE
from tempfile import mkdtemp
import os
import socket
import sys
import yaml

REMOVE_BRACKETS = str.maketrans('()', '  ')

def main(args):
    """
    Retrieve view definitions and print the requested report.
    """

    if len(args) < 3 or (args[1] != 'diff' and args[1] != 'redefine'):
        print(
            'Synopsis: csview [ diff <other_hostname | redefine <other_hostname> ]\n\n' \
            'diff     - comapres the schema backups of the current host with the specified host.\n\n' \
            'redefine - for tables configured in .../cloudscheduler/etc//schema_backup.conf, this\n' \
            '           funcion reloads the table definition and data from the specified host\'s\n' \
            '           schema backups.'
            )
        exit(0)

    gvar = {'priorities': {}, 'tables': {}, 'views': {}}

    gvar['cmd_path'] = os.path.realpath(args[0])
    gvar['path_info'] = gvar['cmd_path'].split('/')
    gvar['ix'] = gvar['path_info'].index('cloudscheduler')
    gvar['config_file_path'] = '%s/etc/schema_backup.conf' % '/'.join(gvar['path_info'][:gvar['ix']+1])
    gvar['schema_backup_dir'] = '%s/schema/schema_backup' % '/'.join(gvar['path_info'][:gvar['ix']+1])
    gvar['fqdn'] = socket.getfqdn()
    gvar['other_fqdn'] = args[2]

    if not os.path.exists('%s/%s' % (gvar['schema_backup_dir'], gvar['other_fqdn'])):
        print('%s/%s' % (gvar['schema_backup_dir'], gvar['other_fqdn']))
        print('Schema backups for host "%s" do not exist.' % gvar['other_fqdn'])
        exit(1)

    if args[1] == 'diff':
        p1 = Popen(['diff', '-r', '%s/%s' % (gvar['schema_backup_dir'], gvar['fqdn']), '%s/%s' % (gvar['schema_backup_dir'], gvar['other_fqdn'])], stdout=PIPE, stderr=PIPE)
        p2 = Popen(['awk', '/^>  |^<  |Only|diff/'], stdin=p1.stdout)

    elif args[1] == 'redefine':
        fd = open('/etc/cloudscheduler/cloudscheduler.yaml')
        gvar['csv2_config'] = yaml.load(fd.read())
        fd.close()

        if os.path.isfile(gvar['config_file_path']):
            fd = open(gvar['config_file_path'])
            gvar['backup_data'] = fd.read().split('\n')
            fd.close()
        else:
           gvar['backup_data'] = []

        for table in sorted(gvar['backup_data']):
            if table:
                print('Redefining table "%s".' % table)
                table_backup_path = '%s/%s/%s' % (gvar['schema_backup_dir'], gvar['other_fqdn'], table)
                if os.path.isfile(table_backup_path):
                    fd = open(table_backup_path)
                    _p1 = Popen(
                        [
                            'mysql',
                            '-u%s' % gvar['csv2_config']['database']['db_user'],
                            '-p%s' % gvar['csv2_config']['database']['db_password'],
                            gvar['csv2_config']['database']['db_name']
                            ],
                        stdin=fd,
                        stdout=PIPE,
                        stderr=PIPE
                        )
                    stdout, stderr = _p1.communicate()
                    fd.close()
                    if _p1.returncode != 0:
                        print('Failed to redine view "%s" - %s' % (view, stderr.decode('utf-8')))
                        exit(1)
                else:
                    print('Skipping redefinition of table "%s", backup file "%s" missing.' % (table, table_backup_path))

if __name__ == "__main__":
    main(sys.argv)
