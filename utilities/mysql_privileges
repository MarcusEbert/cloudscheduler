#!/usr/bin/env python3
import sys
import os

functions = [
#          if line.find('signal_functions') > -1:
#              tables['csv2_signal_log'] = {'merge': True, 'delete': False, 'privileges': []}
    {'name': 'signal_functions', 'tix': 'SIG', 'alchemy': False},
    {'name': 'inventory_delete_obsolete_database_items(', 'tix': 3, 'mode': 'delete', 'alchemy': False},
    {'name': '.db_delete(', 'tix': 0, 'mode': 'delete', 'alchemy': False},
    {'name': '.db_execute(', 'tix': 'SQL', 'alchemy': False},
    {'name': '.db_insert(', 'tix': 0, 'mode': 'merge', 'alchemy': False},
    {'name': '.db_merge(', 'tix': 0, 'mode': 'merge', 'alchemy': False},
    {'name': '.db_query(', 'tix': 'REF', 'alchemy': False},
    {'name': '.db_update(', 'tix': 0, 'mode': 'merge', 'alchemy': False},
    {'name': 'db_map', 'tix': 'MAP', 'alchemy': True},
    {'name': 'delete_obsolete_database_items(', 'tix': 3, 'mode': 'delete', 'alchemy': True},
    {'name': '.db_connection.delete(', 'tix': 0, 'mode': 'delete', 'alchemy': True},
    {'name': '.db_connection.execute(', 'tix': 'SQL', 'alchemy': True},
    {'name': '.db_connection.merge(', 'tix': 0, 'mode': 'merge', 'alchemy': True},
    {'name': '.db_connection.query(', 'tix': 'REF', 'alchemy': True},
    {'name': '.db_session.delete(', 'tix': 0, 'mode': 'delete', 'alchemy': True},
    {'name': '.db_session.execute(', 'tix': 'SQL', 'alchemy': True},
    {'name': '.db_session.merge(', 'tix': 0, 'mode': 'merge', 'alchemy': True},
    {'name': '.db_session.query(', 'tix': 'REF', 'alchemy': True}
    ]

def resolve_refs(handles):
    resolved = {}
    for line in lines:
        for handle in handles:
            if line.find('%s' % handle) > -1:
                words = line.split()
                if words[0] == 'for':
                    new_handle = words[1]
                else:
                    new_handle = words[0]
 
                if new_handle not in handles and new_handle not in resolved:
                    resolved[new_handle] = handles[handle]

    return resolved

if len(sys.argv) < 2:
    print('Synopsis: mysql_privileges <blank_seperated_python_module_list>')
    exit(0)

tables = {}
for ix in range(1, len(sys.argv)):
    if os.path.isfile(sys.argv[ix]) and sys.argv[ix] != 'try':
        try:
            with open(sys.argv[ix]) as fd:
               lines = fd.read().split('\n')
        except:
            continue

        handles = {}
        db_calls = []
        for line in lines:
            for function in functions:
                words1 = line.split(function['name'])
                if len(words1) > 1:
                    if function['tix'] == 'SQL':
                        words2 = words1[1][1:].split()
                        if len(words2) > 2 and words2[0] ==  'delete':
                            db_calls.append([words2[2], 'delete', function['alchemy']])
                        if len(words2) > 2 and words2[0] ==  'insert':
                            db_calls.append([words2[2], 'merge', function['alchemy']])
                        if len(words2) > 1 and words2[0] ==  'update':
                            db_calls.append([words2[1], 'merge', function['alchemy']])

                    elif function['tix'] == 'MAP':
                        handle = line.split()
                        table = line.split('.')
                        handles[handle[0]] = table[-1]
                        handles[table[-1]] = table[-1]

                    elif function['tix'] == 'REF':
                        words2 = words1[1].replace(')', ',').split(',')
                        handle = words2[0]

                        words3 = line.split('=')
                        words4 = words3[0].split()
                        if len(words3) > 2 and len(words4[0]) > 0 and words4[0] != handle and handle in handles:
                            handles[words4[0]] = handles[handle]

                    elif function['tix'] == 'SIG':
                        tables['csv2_signal_log'] = {'merge': True, 'delete': False, 'privileges': []}

                    elif function['tix'] >= 0:
                        words2 = words1[1].split(',')
                        if words2[function['tix']][-1] == ')':
                            db_calls.append([words2[function['tix']][:-1].strip(), function['mode'], function['alchemy']])
                        else:
                            db_calls.append([words2[function['tix']].strip(), function['mode'], function['alchemy']])

        if len(handles) > 0:
            print('SQLAlchemy object to table mappings(%s):' % len(handles), file=sys.stderr)
            for handle in sorted(handles):
                print('    %s -> %s' % (handle, handles[handle]), file=sys.stderr)

            print('', file=sys.stderr)

        if len(db_calls) > 0:
            print('Database call summary (%s):' % len(db_calls), file=sys.stderr)
            for db_call in db_calls:
                if db_call[0] in handles:
                    table = handles[db_call[0]]
                else:
                    table = db_call[0]

                if table not in tables:
                    tables[table] = {'merge': True, 'delete': False, 'privileges': []}

                if db_call[1] == 'delete':
                    tables[table]['delete'] = True
                  
                if db_call[2]:
                    print('    %-6s %s (SQLAlchemy)' % (db_call[1], table), file=sys.stderr)
                else:
                    print('    %-6s %s' % (db_call[1], table), file=sys.stderr)

            print('', file=sys.stderr)

print('Privileges summary:', file=sys.stderr)
privileges = ['csv2.*:SELECT']
for table in sorted(tables):
    if tables[table]['merge']:
        tables[table]['privileges'].append('INSERT')
        tables[table]['privileges'].append('UPDATE')

    if tables[table]['delete']:
        tables[table]['privileges'].append('DELETE')

    if len(tables[table]['privileges']) > 0:
        privileges.append('csv2.%s:%s' % (table, ','.join(tables[table]['privileges'])))

    print("    %-48s: %s" % (table, tables[table]), file=sys.stderr)

print('', file=sys.stderr)

print("%s" % '/'.join(privileges))

