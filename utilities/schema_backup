#!/usr/bin/env python
"""
Back up the structure of all tables in the csv2 database. For those tables listed in
gvar['backup_data'] (see the main function) also backup the data.
"""
from subprocess import Popen, PIPE
from tempfile import mkdtemp
import os
import shutil
import socket
import sys
import yaml

def backup(gvar, table, data=False):
    """
    Perform backup, with or without data. The backup is performed to a temporary directory
    and only moved to the permanent directory if the table has changed. Since the backup
    directories are part of a git repository, this procedure reduces the number of commits.
    """

    print(table)

    if table in gvar['backup_data']:
        backup_cmd = [
            'mysqldump',
            '-u%s' % gvar['csv2_config']['database']['db_user'],
            '-p%s' % gvar['csv2_config']['database']['db_password'],
            gvar['csv2_config']['database']['db_name'],
            table
            ]
    else:
        backup_cmd = [
            'mysqldump',
            '-u%s' % gvar['csv2_config']['database']['db_user'],
            '-p%s' % gvar['csv2_config']['database']['db_password'],
            '--no-data',
            gvar['csv2_config']['database']['db_name'],
            table
            ]


    _p1 = Popen(
        backup_cmd,
        stdout=PIPE,
        stderr=PIPE
        )
    stdout, stderr = _p1.communicate()
    if _p1.returncode != 0:
        print('Failed to retrieve table definition for: %s' % table)
        exit(1)

    _fd = open('%s/%s' % (gvar['temp_dir'], table), 'w')
    _fd.write(stdout)
    _fd.close()

    if os.path.isfile('%s/%s' % (gvar['backup_dir'], table)):
        _p1 = Popen(
            [
                'diff',
                '%s/%s' % (gvar['backup_dir'], table),
                '%s/%s' % (gvar['temp_dir'], table)
                ],
            stdout=PIPE,
            stderr=PIPE
            )
        _p2 = Popen(
            [
                'awk',
                '/^<|^>/ && !/Dump completed on /'
                ],
            stdin=_p1.stdout,
            stdout=PIPE,
            stderr=PIPE
            )
        stdout, stderr = _p2.communicate()
        if _p2.returncode != 0:
            print('Failed to compare table definition for: %s' % table)
            exit(1)
    else:
        stdout = 'missing'

    if stdout != '':
        _p1 = Popen(
            [
                'mv',
                '-f',
                '%s/%s' % (gvar['temp_dir'], table),
                '%s/%s' % (gvar['backup_dir'], table)
                ],
            stdout=PIPE,
            stderr=PIPE
            )
        stdout, stderr = _p1.communicate()
        if _p1.returncode != 0:
            print('Failed to update table definition for: %s - %s' % (table, stderr))
            exit(1)

        print('Updated table definition for: %s' % table)

def main(args):
    """
    Retrieve the table list from the database, and for each table buckup the structure and,
    if listed in the gvar['backup_data'] variable, backup the data and structure.
    """
    gvar = { 'cmd_path': os.path.abspath(args[0]) }

    fd = open('/etc/cloudscheduler/cloudscheduler.yaml')
    gvar['csv2_config'] = yaml.load(fd.read())
    fd.close()
    
    gvar['path_info'] = gvar['cmd_path'].split('/')
    gvar['ix'] = gvar['path_info'].index('cloudscheduler')
    gvar['temp_dir'] = mkdtemp()
    
    gvar['backup_dir'] = '%s/schema/schema_backup/%s' % ('/'.join(gvar['path_info'][:gvar['ix']+1]), socket.getfqdn())
    if not os.path.isdir(gvar['backup_dir']):
         os.makedirs(gvar['backup_dir'], 0o755)
         
    gvar['config_file_path'] = '%s/etc/schema_backup.conf' % '/'.join(gvar['path_info'][:gvar['ix']+1])
    if os.path.isfile(gvar['config_file_path']):
        fd = open(gvar['config_file_path'])
        gvar['backup_data'] = fd.read().split('\n')
        fd.close()
    else:
       gvar['backup_data'] = []

    _p1 = Popen(
        [
            'mysql',
            '-u%s' % gvar['csv2_config']['database']['db_user'],
            '-p%s' % gvar['csv2_config']['database']['db_password'],
            '-e',
            'show tables;',
            gvar['csv2_config']['database']['db_name']
            ],
        stdout=PIPE,
        stderr=PIPE
        )
    _p2 = Popen(
        [
            'awk',
            '!/Tables_in_/ {print $1}'
            ],
        stdin=_p1.stdout,
        stdout=PIPE,
        stderr=PIPE
        )
    stdout, stderr = _p2.communicate()
    if _p2.returncode != 0:
        print('Failed to retrieve table list.')
        exit(1)

    print('csv2 schema-backup starting...')

    tables = stdout.split()
    for table in tables:
        if len(table) < 5 or table[:5] != 'view_':
            backup(gvar, table)

#   shutil.rmtree(gvar['temp_dir'])
    print('csv2 schema-backup completed.')

if __name__ == "__main__":
    main(sys.argv)
