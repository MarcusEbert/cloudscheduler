#!/usr/bin/env python
"""
Back up the structure of all tables in the csv2 database. For those tables listed in
gvar['backup_data'] (see the main function) also backup the data.
"""
from subprocess import Popen, PIPE
from tempfile import mkdtemp
import os
import shutil
import sys

def backup(gvar, table, data=False):
    """
    Perform backup, with or without data. The backup is performed to a temporary directory
    and only moved to the permanent directory if the table has changed. Since the backup
    directories are part of a git repository, this procedure reduces the number of commits.
    """
    if data:
        backup_cmd = [
            'mysqldump',
            '-uroot',
            '-p%s' % gvar['pw'],
            'csv2',
            table
            ]
        schema_backup_dir = \
            '%s/schema/backup_with_data' % '/'.join(gvar['path_info'][:gvar['ix']+1])
    else:
        backup_cmd = [
            'mysqldump',
            '-uroot',
            '-p%s' % gvar['pw'],
            '--no-data',
            'csv2',
            table
            ]
        schema_backup_dir = \
            '%s/schema/backup' % '/'.join(gvar['path_info'][:gvar['ix']+1])


    _p1 = Popen(
        backup_cmd,
        stdout=PIPE,
        stderr=PIPE
        )
    stdout, stderr = _p1.communicate()
    if _p1.returncode != 0:
        print('Failed to retrieve table definition for: %s' % table)
        exit(1)

    _fd = open('%s/%s' % (gvar['temp_dir'], table), 'w')
    _fd.write(stdout)
    _fd.close()

    if not os.path.isfile('%s/%s' % (schema_backup_dir, table)):
        stdout = 'File %s/%s does not exist.' % (schema_backup_dir, table)
    else:
        _p1 = Popen(
            [
                'diff',
                '%s/%s' % (schema_backup_dir, table),
                '%s/%s' % (gvar['temp_dir'], table)
                ],
            stdout=PIPE,
            stderr=PIPE
            )
        _p2 = Popen(
            [
                'awk',
                '/^<|^>/ && !/Dump completed on /'
                ],
            stdin=_p1.stdout,
            stdout=PIPE,
            stderr=PIPE
            )
        stdout, stderr = _p2.communicate()
        if stderr != '':
            print('Failed to compare table definition for: %s' % table)
            exit(1)

    if stdout != '':
        _p1 = Popen(
            [
                'mv',
                '-f',
                '%s/%s' % (gvar['temp_dir'], table),
                '%s/%s' % (schema_backup_dir, table)
                ],
            stdout=PIPE,
            stderr=PIPE
            )
        stdout, stderr = _p1.communicate()
        if stderr != '':
            print('Failed to update table definition for: %s' % table)
            exit(1)

        print('Updated table definition for: %s' % table)


def main(args):
    """
    Retrieve the table list from the database, and for each table buckup the structure and,
    if listed in the gvar['backup_data'] variable, backup the data and structure.
    """
    gvar = {
        'backup_data': [
            'csv2_attribute_mapping',
            'csv2_config',
            ],
        'cmd_path': os.path.abspath(args[0]),
        }

    gvar['path_info'] = gvar['cmd_path'].split('/')
    gvar['ix'] = gvar['path_info'].index('cloudscheduler')
    gvar['temp_dir'] = mkdtemp()
    gvar['secrets_file'] = '/home/crlb/Git/ansible-systems/heprc/staticvms/vars/csv2-dev-secrets.yaml' 
#       % '/'.join(gvar['path_info'][:gvar['ix']])
    gvar['vp_file'] = '%s/.pw/staticvms' % '/'.join(gvar['path_info'][:3])

    _p1 = Popen(
        [
            'ansible-vault',
            'view',
            gvar['secrets_file'],
            '--vault-password-file',
            gvar['vp_file']
            ],
        stdout=PIPE,
        stderr=PIPE
        )
    _p2 = Popen(
        [
            'awk',
            '/^mariadb_root:/ {print $2}'
            ],
        stdin=_p1.stdout,
        stdout=PIPE,
        stderr=PIPE
        )
    stdout, stderr = _p2.communicate()
    if stderr != '':
        print('Failed to retrieve DB password.')
        exit(1)

    gvar['pw'] = stdout.strip()

    _p1 = Popen(
        [
            'mysql',
            '-uroot',
            '-p%s' % gvar['pw'],
            '-e',
            'show tables;',
            'csv2'
            ],
        stdout=PIPE,
        stderr=PIPE
        )
    _p2 = Popen(
        [
            'awk',
            '!/Tables_in_csv2/ {print $1}'
            ],
        stdin=_p1.stdout,
        stdout=PIPE,
        stderr=PIPE
        )
    stdout, stderr = _p2.communicate()
    if stderr != '':
        print('Failed to retrieve table list.')
        exit(1)

    tables = stdout.split()
    for table in tables:
        backup(gvar, table)

        if table in gvar['backup_data']:
            backup(gvar, table, data=True)

    shutil.rmtree(gvar['temp_dir'])
    print('csv2 schema-backup completed.')

if __name__ == "__main__":
    main(sys.argv)
