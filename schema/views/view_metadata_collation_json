/*
** List metadata in collation order. This view provides SQL "select" statements
** to be used to retrieve the actual metadata as follows:
**
**    # Fetch the metadata list.
**    metadata_list = json.loads(config.db_connection.execute(
**        select([view_metadata_collation_json])
**        ).fetchone().group_metadata.decode('utf-8'))
**
**    # Fetch all the metadata for "group-a"/"cloud-b".
**    for metadata_select in metadata_list['group-a']['cloud-b']:
**        metadata =  config.db_connection.execute(metadata_select).fetchone()[0]
*/
create or replace view view_metadata_collation_json as

select
replace(
    replace(
        replace(
            replace(
                replace(
                    replace(
                        replace(
                            concat("{",  group_concat(cloud_source), "}"),
                            '"', "''"),
                        "}''", "}"),
                    "''{", "{"),
                "]''", "]"),
            "''[", "["),
        "''", '"'),
    '},{', ', ') as group_metadata
from (
    /* n04 */
    select
    1 as grouping,
    concat("''", group_name, "'': ", group_concat(cloud_metadata)) as cloud_source
    from (
        /* n03 */
        select
        group_name, 
        replace(
            json_object(
                cloud_name,
                metadata
                ),
            '"', "''") as cloud_metadata
        from (
            /* n02 */
            select
            group_name,
            cloud_name,
            concat('[', group_concat(metadata_source order by priority,metadata_name), ']') as metadata
                /*

                All of the above outer nestings should be replaced by:

                select
                json_format('{%X{%X[[%X*]]}}', group_name, cloud_name, metadata_name, metadata_source, mime_type order by priority,metadata_name)

                Where: %X is either %s or %d or %f.

                */

                from (
                    /* n01 */
                    select
                    priority,
                    metadata_name,
                    group_name,
                    cloud_name,
                    case when type='group' then
                        concat(
                            "[''",
                            metadata_name,
                            "'', ''select metadata from csv2_group_metadata where group_name='",
                            group_name,
                            "' and metadata_name='",
                            metadata_name,
                            "';'', ''",
                            mime_type,
                            "'']"
                            )
                    else
                        concat(
                            "[''",
                            metadata_name,
                            "'', ''select metadata from csv2_group_resource_metadata where group_name='",
                            group_name,
                            "' and cloud_name='",
                            cloud_name,
                            "' and metadata_name='",
                            metadata_name,
                            "';'', ''",
                            mime_type,
                            "'']"
                            )
                    end as metadata_source

                    from view_metadata_collation as vmc
                    where metadata_name != ""
                    ) as n01

            group by group_name,cloud_name
            ) as n02
        ) as n03

    group by group_name
    ) as n04

group by grouping

;
