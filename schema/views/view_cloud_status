/*
** List all group resources (clouds) with VM & resource counts.
*/
create or replace view view_cloud_status as

select

n03.group_name,
n03.cloud_name,
enabled,
cascading_vm_flavor as default_flavor,
cascading_vm_image as default_image,
cascading_vm_keep_alive as keep_alive,
cascading_vm_keyname as default_keyname,
cascading_vm_network as default_network,
VMs,
VMs_starting,
VMs_unregistered,
VMs_idle,
VMs_running,
VMs_retiring,
VMs_manual,
VMs_in_error,
VMs_other,
Foreign_VMs,
cores_ctl,

case when cores_ctl=-1 then
    case when cores_softmax=-1 then
        ifnull(cores_max,0)
    else
        least(cores_softmax, ifnull(ram_max,0))
    end
else
    case when cores_softmax=-1 then
        least(cores_ctl, ifnull(ram_max,0))
    else
        least(cores_ctl, cores_softmax, ifnull(ram_max,0))
    end
end as cores_limit,
cores_max,

cores_native,
cores_foreign,
cores_idle,
cores_native+cores_foreign as cores_native_foreign,
cores_idle+cores_native+cores_foreign as cores_idle_native_foreign,
ram_ctl,

case when ram_ctl=-1 then
    ifnull(ram_max,0)
else
    least(ram_ctl, ifnull(ram_max,0))
end as ram_limit,
ram_max,

ram_native as ram_busy,
ram_foreign,
ram_idle,
ram_idle+ram_native as ram_native,
slot_count,
slot_core_count,
slot_idle_core_count

from (
    select

    group_name,
    cloud_name,
    sum(VMs) as VMs,
    sum(VMs_starting) as VMs_starting,
    sum(VMs_unregistered) as VMs_unregistered,
    sum(VMs_idle) as VMs_idle,
    sum(VMs_running) as VMs_running,
    sum(VMs_retiring) as VMs_retiring,
    sum(VMs_manual) as VMs_manual,
    sum(VMs_in_error) as VMs_in_error,
    sum(VMs_other) as VMs_other,
    sum(Foreign_VMs) as Foreign_VMs,
    sum(slot_count) as slot_count,
    sum(slot_core_count) as slot_core_count,
    sum(slot_idle_core_count) as slot_idle_core_count

    from (
        /*
        ** Ensure all clouds are represented.
        */
        select

        group_name,
        cloud_name,
        0 as VMs,
        0 as VMs_starting,
        0 as VMs_unregistered,
        0 as VMs_idle,
        0 as VMs_running,
        0 as VMs_retiring,
        0 as VMs_manual,
        0 as VMs_in_error,
        0 as VMs_other,
        0 as Foreign_VMs,
        0 as slot_count,
        0 as slot_core_count,
        0 as slot_idle_core_count

        from view_clouds

        /*
        ** Retrieve VM count for each group.
        */
        union all select

        group_name,
        cloud_name,
        case when foreign_vm=0 then 1 else 0 end as VMs,
        case when poller_status="starting" then 1 else 0 end as VMs_starting,
        case when poller_status="unregistered" then 1 else 0 end as VMs_unregistered,
        case when poller_status="idle" then 1 else 0 end as VMs_idle,
        case when poller_status="running" then 1 else 0 end as VMs_running,
        case when poller_status="retiring" then 1 else 0 end as VMs_retiring,
        case when poller_status="manual" then 1 else 0 end as VMs_manual,
        case when poller_status="error" then 1 else 0 end as VMs_in_error,
        case when poller_status="other" then 1 else 0 end as VMs_other,
        case when poller_status="foreign" then 1 else 0 end as Foreign_VMs,
        0 as slot_count,
        0 as slot_core_count,
        0 as slot_idle_core_count

        from view_vms

        /*
        ** Retrieve VM count for each group.
        */
        union all select

        group_name,
        cloud_name,
        0 as VMs,
        0 as VMs_starting,
        0 as VMs_unregistered,
        0 as VMs_idle,
        0 as VMs_running,
        0 as VMs_retiring,
        0 as VMs_manual,
        0 as VMs_in_error,
        0 as VMs_other,
        0 as Foreign_VMs,
        slot_count,
        slot_core_count,
        slot_idle_core_count
        from (

            select
            case when instr(machine,'--')=0 then
                "-"
            else
                substring_index(machine,'--',1)
            end as group_name,
            case when instr(machine,'--')=0 then
                "-"
            else
                substring_index(substring_index(machine,'--',2),'--',-1)
            end as cloud_name,

            case when state="Claimed" then
                1
            else
                0
            end as slot_count,

            case when state="Claimed" then
                slot_CPUs
            else
                0
            end as slot_core_count,

            case when state="Claimed" then
                0
            else
                slot_CPUs
            end as slot_idle_core_count

            from condor_machines
            ) as n01
        ) as n02
    group by group_name,cloud_name
    ) as n03

left outer join view_clouds as vc on
n03.group_name=vc.group_name and
n03.cloud_name=vc.cloud_name

order by group_name,cloud_name
;
