/*
** List group/cloud/flavors in flavor priority order and for each group/cloud/flavor
** combination show the number of VMs up and down.
*/
create or replace view view_available_resources as

select
    grwcf.*,
    cast(least(cores_idle div flavor_cores, ram_idle div flavor_ram) as integer) as flavor_slots

from (
    select
        vgr.group_name,
        vgr.cloud_name,
        vgr.enabled,
        vgr.spot_price,
        vgr.cascading_vm_image as default_image,
        vgr.cascading_vm_keep_alive as keep_alive,
        vgr.cascading_vm_network as default_network,
        authurl,
        project,
        username,
        password,
        keyname,
        cacertificate,
        region,
        user_domain_name,
        project_domain_name,
        cloud_type,

        cores_max,
        cores_ctl,
        cores_used,
        cores_native,
        cores_foreign,
        cores_idle,

        ram_max,
        ram_ctl,
        ram_used,
        ram_native,
        ram_foreign,
        ram_idle,

        name as flavor_name,
        id as flavor_id,
        concat(vgr.cloud_name, "::", name) as flavor_instance_type,
        cf.cores as flavor_cores,
        disk + ephemeral_disk as flavor_disk,
        disk as flavor_enduring_disk,
        ephemeral_disk as flavor_ephemeral_disk,
        cf.ram as flavor_ram,
        swap as flavor_swap,

        /*
        ** Use the row_number() DB function to create flavor_priority, ranking flavors by cores, disk, ram, and swap.
        */
        row_number() over (partition by
        vgr.group_name,
        vgr.cloud_name
        order by
        flavor_cores,
        flavor_disk,
        flavor_enduring_disk,
        flavor_ephemeral_disk,
        flavor_ram,
        flavor_swap
        ) as flavor_priority,

        /*
        ** User the concat() DB function to create (a unique ID for the) flavor.
        */
        concat(vgr.group_name, "::", vgr.cloud_name, "::", cf.name) as flavor

        from view_group_resources as vgr
        join cloud_flavors as cf on
        vgr.group_name=cf.group_name and
        vgr.cloud_name=cf.cloud_name and (
            vgr.cascading_vm_flavor is null or
            vgr.cascading_vm_flavor="" or
            vgr.cascading_vm_flavor=cf.name
            )


        order by vgr.group_name,vgr.cloud_name,flavor_priority
        ) as grwcf /* group_resources_with_cloud_flavors */
  
where
  enabled=1 and
  flavor_cores<=cores_idle and
  flavor_ram<=ram_idle

order by group_name,cloud_name,flavor_priority

;
