condor_q -allusers;

select
    user,
    target_clouds,
    image,
    instance_type,
    request_cpus,
    max(request_disk div (1024*1024)) as request_disk,
    max(request_ram) as request_ram,
    sum(idle) as idle,
    sum(running) as running,
    sum(completed) as completed,
    sum(held) as held,
    sum(other) as other
from (
    select
        user,
        target_clouds,
        image,
        instance_type,
        request_cpus,
        request_disk div (1024*1024) as request_disk,
        request_ram,
        case when job_status=1 then 1 else 0 end as idle,
        case when job_status=2 then 1 else 0 end as running,
        case when job_status=4 then 1 else 0 end as completed,
        case when job_status=5 then 1 else 0 end as held,
        case when job_status!=1 and job_status!=2 and job_status!=4 and job_status!=5 then 1 else 0 end as other
    from condor_jobs
    ) as cj
group by
    user,
    target_clouds,
    image,
    instance_type,
    request_cpus
order by
    user,
    target_clouds,
    image,
    instance_type,
    request_cpus,
    request_disk,
    request_ram
;

select
    group_name,
    job_per_core,
    request_cpus_max as cpus_max,
    request_cpus_total as cpus_total,
    request_disk_max as disk_max,
    request_disk_total as disk_total,
    request_ram_max as ram_max,
    request_ram_total as ram_total,
    request_swap_max as swap_max,
    request_swap_total as swap_total,
    idle,
    running,
    completed,
    held,
    other,
    flavors
from view_groups_of_idle_jobs
order by
    group_name
;

select
    group_name,
    cloud_name,
    sum(flavor_slots) as flavor_slots,
    sum(flavor_VMs) as flavor_VMs,
    sum(flavor_manual) as flavor_manual,
    sum(flavor_error) as flavor_error,
    sum(flavor_retiring) as flavor_retiring
from view_available_resources
group by
    group_name,
    cloud_name
order by
    group_name,
    cloud_name
;

#elect
    machine,
    min(total_disk div (1024*1024)) as total_disk,
    sum(case when slot_type="Partitionable" then 1 else 0 end) as primary_slots,
    sum(case when slot_type="Dynamic" then 1 else 0 end) as dynamic_slots
from condor_machines
group by
    machine
order by
    machine
;

select
    cv.group_name,
    cv.cloud_name,
    cf.name as flavor,
    hostname,
    htcondor_partitionable_slots as primary_slots,
    htcondor_dynamic_slots as dynamic_slots,
    htcondor_slots_timestamp as slots_timestamp,
    retire,
    terminate,
    cv.last_updated
from csv2_vms as cv
left outer join cloud_flavors as cf on
    cv.group_name=cf.group_name and
    cv.cloud_name=cf.cloud_name and
    cv.flavor_id=cf.id
where
    htcondor_dynamic_slots is null or
    htcondor_dynamic_slots<1 or 
    terminate>0
order by
     group_name,
     cloud_name,
     flavor,
     hostname
;

select * from view_idle_vms;
