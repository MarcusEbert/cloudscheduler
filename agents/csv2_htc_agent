#!/usr/bin/env python3
from subprocess import Popen, PIPE
import htcondor
import logging
import os
import pika
import socket
import sys
import time
import yaml

MASTER_TYPE = htcondor.AdTypes.Master
STARTD_TYPE = htcondor.AdTypes.Startd

def callback(ch, method, properties, body):
    yaml_dict = yaml_full_load(body)
    if 'command' in yaml_dict.keys():
        # seems to be valid
        if yaml_dict['command'] == "retire":
            # need to pass localhostname, localhost or nothing might also work
            session = get_condor_session()
            if session:
                try:
                    classad = get_master_classad(session, yaml_dict['machine'], yaml_dict['hostname'])
                    if classad == -1:
                        #there was a condor error
                        ch.basic_publish(exchange='',
                             routing_key=properties.reply_to,
                             properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                             body=yaml.dump([2, "Condor error"]))
                        ch.basic_ack(delivery_tag=method.delivery_tag)
                        return
                    if not classad:
                        #classad not in condor
                        logging.error("Classad not found for %s//%s" % (yaml_dict['machine'], yaml_dict['hostname']))
                        ch.basic_publish(exchange='',
                            routing_key=properties.reply_to,
                            properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                            body=yaml.dump([1, "No condor classad"]))
                        ch.basic_ack(delivery_tag=method.delivery_tag)
                        return
                    result = condor_off(classad)
                    if result:
                        # should be a success, we need to return to the client now
                        # we may want to add msg and return code to the result body instead of
                        # whatever comes back from condor
                        ch.basic_publish(exchange='',
                            routing_key=properties.reply_to,
                            properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                            body=yaml.dump([0, result]))
                        ch.basic_ack(delivery_tag=method.delivery_tag)
                        return
                    else:
                        #failed to issue condor off
                        result = "Failed to issue condor_off"
                        ch.basic_publish(exchange='',
                            routing_key=properties.reply_to,
                            properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                            body=yaml.dump([1, result]))
                        ch.basic_ack(delivery_tag=method.delivery_tag)
                        return
                except Exception as exc:
                    logging.error("Failed to get condor classad or issue condor off")
                    logging.error(exc)
                    #Failure trying to get classad or issue condor off
                    ch.basic_publish(exchange='',
                        routing_key=properties.reply_to,
                        properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                        body=yaml.dump([1, exc]))
                    ch.basic_ack(delivery_tag=method.delivery_tag)
                    return

            else:
                # failed to get condor session
                result = "Failed to get condor_session"
                ch.basic_publish(exchange='',
                    routing_key=properties.reply_to,
                    properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                    body=yaml.dump([1, result]))
                ch.basic_ack(delivery_tag=method.delivery_tag)
                return

        elif yaml_dict['command'] == 'invalidate':
            # need to pass localhostname, localhost or nothing might also work
            session = get_condor_session()
            if session:
                master_classad = get_master_classad(session, yaml_dict['machine'], yaml_dict['hostname'])
                if not master_classad:
                    # there was no matching classad
                    logging.error("Classad not found for %s//%s" % (yaml_dict['machine'], yaml_dict['hostname']))
                    ch.basic_publish(exchange='',
                        routing_key=properties.reply_to,
                        properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                        body=yaml.dump([1, "No condor classad"]))
                    ch.basic_ack(delivery_tag=method.delivery_tag)
                    return

                master_result = invalidate_master_classad(session, master_classad)
                startd_classads = get_startd_classads(session, yaml_dict['hostname'])
                startd_result = invalidate_startd_classads(session, startd_classads)
                result = [0, master_result, startd_result]
                # check the result and report back to the return exchange
                ch.basic_publish(exchange='',
                    routing_key=properties.reply_to,
                    properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                    body=yaml.dump(result))
                ch.basic_ack(delivery_tag=method.delivery_tag)
                return
            else:
                logging.error("Failed to get condor session")
                result = "Failed to get condor session"
                ch.basic_publish(exchange='',
                    routing_key=properties.reply_to,
                    properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                    body=yaml.dump([1, result]))
                ch.basic_ack(delivery_tag=method.delivery_tag)
                return

        elif yaml_dict['command'] == 'hold':
            #
            #TODO for jobs
            #
            #
            ch.basic_publish(exchange='',
                routing_key=properties.reply_to,
                properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                body=yaml.dump([1, "NOT YET IMPLEMENTED"]))
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

        elif yaml_dict['command'] == 'query_condor_cert':
            logger.info('command: query_condor_cert')

            result = {
                'eol': 0,
                'subject': None
                }

            p1 = Popen([
                'condor_config_val',
                'gsi_daemon_cert'
                ], stdout=PIPE, stderr=PIPE)
            stdout, stderr = p1.communicate()

            if p1.returncode == 0:
                condor_hostcert = decode(stdout).strip()

            elif 'condor_hostcert' in config:
                condor_hostcert = config['condor_hostcert']

            else:
                condor_hostcert = None

            if condor_hostcert:
                result['subject'], result['eol'] = get_gsi_cert_subject_and_eol(condor_hostcert)

            ch.basic_publish(exchange='',
                routing_key=properties.reply_to,
                properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                body=yaml.dump(result))
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

        elif yaml_dict['command'] == 'query_condor_worker_cert':
            logger.debug('command: query_condor_worker_cert')
            
            result = {
                'cert': None,
                'eol': 0,
                'key': None,
                'subject': None
                }

            if 'condor_worker_cert' in config:
                result['subject'], result['eol'] = get_gsi_cert_subject_and_eol(config['condor_worker_cert'])
                result['cert'] = zip_base64(config['condor_worker_cert'])

            if 'condor_worker_key' in config:
                result['key'] = zip_base64(config['condor_worker_key'])
                if result['key'] == 'unreadable':
                    result['eol'] = -999999

            ch.basic_publish(exchange='',
                routing_key=properties.reply_to,
                properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                body=yaml.dump(result))
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

        elif yaml_dict['command'] == 'noop':
            # this is just a test to make sure agent is still available
            result = [0, "Noop success"]
            ch.basic_publish(exchange='',
                    routing_key=properties.reply_to,
                    properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                    body=yaml.dump(result))
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

        else:
            ch.basic_publish(exchange='',
                routing_key=properties.reply_to,
                properties=pika.BasicProperties(correlation_id=properties.correlation_id),
                body=yaml.dump([1, "UNKNOWN COMMAND: %s" % yaml_dict['command'] ]))
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

    else:
        #malformed body, throw it out command and maybe return a failure to reply queue
        ch.basic_publish(exchange='',
            routing_key=properties.reply_to,
            properties=pika.BasicProperties(correlation_id=properties.correlation_id),
            body=yaml.dump([1, "NO COMMAND"]))
        ch.basic_ack(delivery_tag=method.delivery_tag)
        return

def condor_off(condor_classad):
    try:
        logging.debug("Sending condor_off to %s" % condor_classad)
        master_result = htcondor.send_command(condor_classad, htcondor.DaemonCommands.DaemonsOffPeaceful)
        if master_result is None:
            # None is good in this case it means it was a success
            master_result = "Success"
        logging.info("Condor_off result: %s" % master_result)
        return master_result
    except Exception as exc:
        logging.error("Condor off failed:")
        logging.error(exc)
        return False

def decode(obj):
    if not obj:
        return ''
    elif isinstance(obj, str):
        return obj
    else:
        return obj.decode('utf-8')

def get_condor_session(hostname=None):
    try:
        condor_session = htcondor.Collector(hostname)
        return condor_session
    except Exception as exc:
        logging.exception("Failed to get condor session for %s:" % hostname)
        logging.error(exc)
        return False

def get_gsi_cert_subject_and_eol(cert):
    if not os.access(cert, os.R_OK):
        logger.warning('function: get_gsi_cert_subject_and_eol, pem: %s is unreadable.' % cert)
        return 'unreadable', -999999

    if os.path.isfile(cert):
        p1 = Popen([
            'openssl',
            'x509',
            '-noout',
            '-subject',
            '-in',
            cert
            ], stdout=PIPE, stderr=PIPE)
        stdout, stderr = p1.communicate()

        stdout = decode(stdout)
        if p1.returncode == 0 and stdout != '':
            words = decode(stdout).split()
            subject = words[1]

            p1 = Popen([
                'openssl',
                'x509',
                '-noout',
                '-dates',
                '-in',
                cert
                ], stdout=PIPE, stderr=PIPE)

            p2 = Popen([
                'awk',
                '/notAfter=/ {print substr($0,10)}'
                ], stdin=p1.stdout, stdout=PIPE, stderr=PIPE)
            stdout, stderr = p2.communicate()

            if p2.returncode == 0:
                eol = int(time.mktime(time.strptime(decode(stdout[:-1]), '%b %d %H:%M:%S %Y %Z')))
                return subject, eol
            else:
                logger.error('function: get_gsi_cert_subject_and_eol(openssl x509 -dates), cert: %s, rc: %s, stdout: %s, stderr: %s' % (cert, p2.returncode, decode(stdout), decode(stderr)))
        else:
            logger.error('function: get_gsi_cert_subject_and_eol(openssl x509 -subject), cert: %s, rc: %s, stdout: %s, stderr: %s' % (cert, p1.returncode, decode(stdout), decode(stderr)))
    else:
        logger.error('function: get_gsi_cert_subject_and_eol(openssl x509 -subject), cert: "%s" does not exist.' % cert)

    return None, None


def get_master_classad(session, machine, hostname):
    try:
        if machine is not "":
            condor_classad = session.query(MASTER_TYPE, 'Name=="%s"' % machine)[0]
        else:
            condor_classad = session.query(MASTER_TYPE, 'regexp("%s", Name, "i")' % hostname)[0]
        return condor_classad
    except IndexError:
        logging.error("Failed to retrieve classad from condor. No matching classad")
    except Exception as exc:
        logging.error("Failed to retrieve classad from condor. Communication error :")
        logging.error(exc)
        return -1
    return False


def get_startd_classads(session, machine):
    startd_list = []
    try:
        condor_classads = session.query(STARTD_TYPE, 'Machine=="%s"' % machine)
        for classad in condor_classads:
            startd_list.append(classad)
        return startd_list
    except Exception as exc:
        logging.error("Failed to retrieve machine classads, aborting...")
        logging.error(exc)
        return False


def invalidate_master_classad(session, classad):
    return session.advertise([classad], "INVALIDATE_MASTER_ADS")

def invalidate_startd_classads(session, classad_list):
    return session.advertise(classad_list, "INVALIDATE_STARTD_ADS")
       
def yaml_full_load(yaml_string):
    if hasattr(yaml, 'full_load'):
        return yaml.full_load(yaml_string)
    else:
        return yaml.load(yaml_string)

def zip_base64(path):
    if not os.access(path, os.R_OK):
        logger.warning('function: zip_base64, pem: %s is unreadable.' % path)
        return 'unreadable'

    if os.path.isfile(path):
        p1 = Popen([
            'gzip',
            '-c',
            path
            ], stdout=PIPE, stderr=PIPE)

        p2 = Popen([
            'base64'
            ], stdin=p1.stdout, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p2.communicate()

        if p2.returncode == 0:
            return decode(stdout)
        else:
            logger.error('function: zip_base64, pem: %s, rc: %s, stdout: %s, stderr: %s' % (path, p2.returncode, decode(stdout), decode(stderr)))

    return None

fd = open(sys.argv[1])
full_config = yaml_full_load(fd.read())
config = full_config['htc_agent']
del full_config
fd.close()

logger = logging.getLogger()
logging.basicConfig(
    filename=config['log_file'],
    level=config['log_level'],
    format='%(asctime)s - %(processName)-12s - %(levelname)s - %(message)s')

logger.info('Starting, config_path: %s' % sys.argv[1])

my_host_name = socket.getfqdn()
csv2_queue = '%s_%s' % (config['csv2_htc_queue_prefix'], my_host_name)

#get pid and write out to /tmp/csv2_htc_agent.pid
mypid =  os.getpid()
f = open("/tmp/csv2_htc_agent.pid","w")
f.write(str(mypid))
f.close()
 
connection = pika.BlockingConnection(pika.ConnectionParameters(config['csv2_host'], config['csv2_port']))
channel = connection.channel()

channel.queue_declare(queue=csv2_queue)

channel.basic_consume(queue=csv2_queue,
                      #auto_ack=True,
                      on_message_callback=callback)

logger.info('Waiting for messages.')
channel.start_consuming()

